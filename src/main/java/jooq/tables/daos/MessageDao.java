/*
 * This file is generated by jOOQ.
 */
package jooq.tables.daos;


import java.util.List;
import java.util.Optional;

import jooq.tables.Message;
import jooq.tables.records.MessageRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MessageDao extends DAOImpl<MessageRecord, jooq.tables.pojos.Message, Integer> {

    /**
     * Create a new MessageDao without any configuration
     */
    public MessageDao() {
        super(Message.MESSAGE, jooq.tables.pojos.Message.class);
    }

    /**
     * Create a new MessageDao with an attached configuration
     */
    public MessageDao(Configuration configuration) {
        super(Message.MESSAGE, jooq.tables.pojos.Message.class, configuration);
    }

    @Override
    public Integer getId(jooq.tables.pojos.Message object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Message> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Message.MESSAGE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<jooq.tables.pojos.Message> fetchById(Integer... values) {
        return fetch(Message.MESSAGE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public jooq.tables.pojos.Message fetchOneById(Integer value) {
        return fetchOne(Message.MESSAGE.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<jooq.tables.pojos.Message> fetchOptionalById(Integer value) {
        return fetchOptional(Message.MESSAGE.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Message> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Message.MESSAGE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<jooq.tables.pojos.Message> fetchByName(String... values) {
        return fetch(Message.MESSAGE.NAME, values);
    }

    /**
     * Fetch records that have <code>message BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Message> fetchRangeOfMessage(String lowerInclusive, String upperInclusive) {
        return fetchRange(Message.MESSAGE.MESSAGE_, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>message IN (values)</code>
     */
    public List<jooq.tables.pojos.Message> fetchByMessage(String... values) {
        return fetch(Message.MESSAGE.MESSAGE_, values);
    }

    /**
     * Fetch records that have <code>date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Message> fetchRangeOfDate(String lowerInclusive, String upperInclusive) {
        return fetchRange(Message.MESSAGE.DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>date IN (values)</code>
     */
    public List<jooq.tables.pojos.Message> fetchByDate(String... values) {
        return fetch(Message.MESSAGE.DATE, values);
    }
}
